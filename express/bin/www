#!/usr/bin/env node

/**
 * Module dependencies.
 */
var finalhandler = require('finalhandler')

var app = require('../app')
var debug = require('debug')('expressexpress:server')
var http = require('http')

var serveStatic = require('serve-static')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Serve up public/ftp folder
 */ 

var serve = serveStatic('public/ftp', {'index': ['index.html', 'index.htm']})

/**
 * Create HTTP server with static serving enabled.
 */

// var server = http.createServer(function onRequest (req, res) {
//   serve(req, res, finalhandler(req, res))
// }) 
// isn't working as expexted

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		console.log('on pipe', val)
		return val;
	}

	if (port >= 0) {
    // port number
    console.log('on port', port)
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
